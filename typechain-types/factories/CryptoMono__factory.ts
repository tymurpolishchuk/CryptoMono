/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CryptoMono, CryptoMonoInterface } from "../CryptoMono";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_target",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102e83803806102e88339818101604052810190610032919061008d565b670de0b6b3a76400008161004691906100e9565b60008190555050610143565b600080fd5b6000819050919050565b61006a81610057565b811461007557600080fd5b50565b60008151905061008781610061565b92915050565b6000602082840312156100a3576100a2610052565b5b60006100b184828501610078565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006100f482610057565b91506100ff83610057565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610138576101376100ba565b5b828202905092915050565b610196806101526000396000f3fe6080604052600436106100295760003560e01c8063a2f09dfa1461002e578063d4b8399214610038575b600080fd5b610036610063565b005b34801561004457600080fd5b5061004d6100a9565b60405161005a91906100c8565b60405180910390f35b60005447106100a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009e90610140565b60405180910390fd5b565b60005481565b6000819050919050565b6100c2816100af565b82525050565b60006020820190506100dd60008301846100b9565b92915050565b600082825260208201905092915050565b7f54617267657420616c7265616479206163686965766564210000000000000000600082015250565b600061012a6018836100e3565b9150610135826100f4565b602082019050919050565b600060208201905081810360008301526101598161011d565b905091905056fea2646970667358221220649532b7efc09f7920579a9a6d330b25716ca05a66ca308e68ed5f077588bc7a64736f6c63430008090033";

type CryptoMonoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CryptoMonoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CryptoMono__factory extends ContractFactory {
  constructor(...args: CryptoMonoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CryptoMono> {
    return super.deploy(_target, overrides || {}) as Promise<CryptoMono>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): CryptoMono {
    return super.attach(address) as CryptoMono;
  }
  override connect(signer: Signer): CryptoMono__factory {
    return super.connect(signer) as CryptoMono__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CryptoMonoInterface {
    return new utils.Interface(_abi) as CryptoMonoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CryptoMono {
    return new Contract(address, _abi, signerOrProvider) as CryptoMono;
  }
}
