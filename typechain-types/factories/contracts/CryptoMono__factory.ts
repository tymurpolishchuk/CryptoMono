/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CryptoMono,
  CryptoMonoInterface,
} from "../../contracts/CryptoMono";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_target",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "addFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161089938038061089983398181016040528101906100329190610175565b61004e61004361006e60201b60201c565b61007660201b60201c565b670de0b6b3a76400008161006291906101d1565b6001819055505061022b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6101528161013f565b811461015d57600080fd5b50565b60008151905061016f81610149565b92915050565b60006020828403121561018b5761018a61013a565b5b600061019984828501610160565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101dc8261013f565b91506101e78361013f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156102205761021f6101a2565b5b828202905092915050565b61065f8061023a6000396000f3fe6080604052600436106100555760003560e01c80633ccfd60b1461005a578063715018a6146100715780638da5cb5b14610088578063a2f09dfa146100b3578063d4b83992146100bd578063f2fde38b146100e8575b600080fd5b34801561006657600080fd5b5061006f610111565b005b34801561007d57600080fd5b50610086610169565b005b34801561009457600080fd5b5061009d61017d565b6040516100aa9190610401565b60405180910390f35b6100bb6101a6565b005b3480156100c957600080fd5b506100d26101ec565b6040516100df9190610435565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190610481565b6101f2565b005b610119610276565b61012161017d565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610166573d6000803e3d6000fd5b50565b610171610276565b61017b60006102f4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015447106101ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e19061050b565b60405180910390fd5b565b60015481565b6101fa610276565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561026a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102619061059d565b60405180910390fd5b610273816102f4565b50565b61027e6103b8565b73ffffffffffffffffffffffffffffffffffffffff1661029c61017d565b73ffffffffffffffffffffffffffffffffffffffff16146102f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e990610609565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103eb826103c0565b9050919050565b6103fb816103e0565b82525050565b600060208201905061041660008301846103f2565b92915050565b6000819050919050565b61042f8161041c565b82525050565b600060208201905061044a6000830184610426565b92915050565b600080fd5b61045e816103e0565b811461046957600080fd5b50565b60008135905061047b81610455565b92915050565b60006020828403121561049757610496610450565b5b60006104a58482850161046c565b91505092915050565b600082825260208201905092915050565b7f54617267657420616c7265616479206163686965766564210000000000000000600082015250565b60006104f56018836104ae565b9150610500826104bf565b602082019050919050565b60006020820190508181036000830152610524816104e8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006105876026836104ae565b91506105928261052b565b604082019050919050565b600060208201905081810360008301526105b68161057a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006105f36020836104ae565b91506105fe826105bd565b602082019050919050565b60006020820190508181036000830152610622816105e6565b905091905056fea264697066735822122009a4156ce75e9c30354fd14ffc3d36abb6b9acbbe5f3159af0d76e78ed8302e264736f6c63430008090033";

type CryptoMonoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CryptoMonoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CryptoMono__factory extends ContractFactory {
  constructor(...args: CryptoMonoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CryptoMono> {
    return super.deploy(_target, overrides || {}) as Promise<CryptoMono>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): CryptoMono {
    return super.attach(address) as CryptoMono;
  }
  override connect(signer: Signer): CryptoMono__factory {
    return super.connect(signer) as CryptoMono__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CryptoMonoInterface {
    return new utils.Interface(_abi) as CryptoMonoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CryptoMono {
    return new Contract(address, _abi, signerOrProvider) as CryptoMono;
  }
}
